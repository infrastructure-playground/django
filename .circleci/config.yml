version: 2.1
jobs:
  unit_test:
    parallelism: 1
    docker:
      - image: infrastructureplayground/$CIRCLE_PROJECT_REPONAME:latest  # the first image is the environment where steps will be executed
        name: django
        environment:
          DOCKERIZED: true
      - image: unnotech/postgres-replication:10.4
        name: postgres
    steps:
      - checkout  # to pull the source code from repository
      - setup_remote_docker:  # needed to connect container ports
          docker_layer_caching: true
      - run: pip install -r requirements.txt
      - run: python manage.py makemigrations
      - run: python manage.py migrate
      - run: python manage.py test authentication.tests.RegistrationTest
      - run: python manage.py test authentication.tests.LoginTest
      - run: python manage.py test inventory.tests.BooksTest
  login_test:
    parallelism: 1  # To run a jobâ€™s steps in parallel, set the parallelism key to a value greater than 1.
    docker:
      - image: infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH  # the first image is the environment where steps will be executed
        name: django
        environment:
          DOCKERIZED: true
      - image: unnotech/postgres-replication:10.4
        name: postgres
    steps:
      - checkout  # to pull the source code from repository
      - setup_remote_docker:  # needed to connect container ports
          docker_layer_caching: true
      - run: pip install -r requirements.txt
      - run: python manage.py makemigrations
      - run: python manage.py migrate
      - run: python manage.py test authentication.tests.RegistrationTest
      - run: python manage.py test authentication.tests.LoginTest
  inventory_test:
    parallelism: 1
    docker:
      - image: infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
        name: django
        environment:
          DOCKERIZED: true
      - image: unnotech/postgres-replication:10.4
        name: postgres
    steps:
      - checkout
      - setup_remote_docker:  # needed to connect container ports
          docker_layer_caching: true
      - run: pip install -r requirements.txt
      - run: python manage.py makemigrations
      - run: python manage.py migrate
      - run: python manage.py test inventory.tests.BooksTest
  push_docker_image:
    machine: true
    steps:
      - checkout
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: >-
             docker build
             --build-arg CIRCLE_BRANCH=$CIRCLE_BRANCH
             --cache-from=infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
             -t infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
             .
      - run: docker push infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
  deploy_to_staging_static:
    parallelism: 1
    docker:
      - image: unnotech/cloud-sdk:python-3.6.5
        name: GCP
    steps:
      - checkout
      - run: echo $STORAGE_BUCKETS_KEY > storageBucketsBackendServiceKey.json
      - run: gcloud auth activate-service-account --key-file=storageBucketsBackendServiceKey.json
      - run: apt-get install python3-pip -y
      - run: pip3 install -r requirements.txt
      - run: echo 'yes' | python3 manage.py collectstatic
      - run: >-
             gsutil
             -h "Cache-Control:public,max-age=$MAX_AGE"
             -m cp -Z -a public-read  -r
             static/.
             gs://$PROJECT_ID-backend-sb/static/
  deploy_to_staging_code:
    parallelism: 1
    docker:
    - image: google/cloud-sdk
      name: GCP
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: >-
             docker pull
             infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
      - run: gcloud config set project $PROJECT_ID
      - run: echo $STORAGE_BUCKETS_KEY > storageBucketsBackendServiceKey.json
      - run: gcloud auth activate-service-account --key-file=storageBucketsBackendServiceKey.json
      - run: gsutil cp gs://$PROJECT_ID-secrets-sb/gkeDeployServiceKey.json .
      - run: gcloud auth activate-service-account --key-file=gkeDeployServiceKey.json
      - run: gcloud config set compute/zone asia-east2-a
      - run: gcloud container clusters get-credentials $PROJECT_ID-gke-cluster
      - run: >-
             docker_image=$(docker inspect --format='{{index .RepoDigests 0}}' infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH);
             kubectl set image deployment esp-echo $CIRCLE_PROJECT_REPONAME=$docker_image --record;
      - run: kubectl get pods
  deploy_to_staging_api:
    docker:
      - image: google/cloud-sdk  # the first image is the environment where steps will be executed
        name: GCP
        environment:
          DOCKERIZED: true
    steps:
      - checkout  # to pull the source code from repository
      - setup_remote_docker:  # needed to connect container ports
          docker_layer_caching: true
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: >-
             docker run -d
             --name=$CIRCLE_PROJECT_REPONAME
             --env OPENAPI_HOST=$CIRCLE_PROJECT_REPONAME.endpoints.$PROJECT_ID.cloud.goog
             --name $CIRCLE_PROJECT_REPONAME
             -p 8000:8000
             infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH
             ping google.com
      - run: docker exec -it $CIRCLE_PROJECT_REPONAME curl http://$CIRCLE_PROJECT_REPONAME:8000/swagger.yaml
      - run: docker cp $CIRCLE_PROJECT_REPONAME:/usr/src/app/swagger.yaml .
      - run: sed -i "s/\"'/\"/" swagger.yaml && sed -i "s/'\"/\"/" swagger.yaml
      - run: echo $STORAGE_BUCKETS_KEY > storageBucketsBackendServiceKey.json
      - run: gcloud auth activate-service-account --key-file=storageBucketsBackendServiceKey.json
      - run: gsutil cp gs://$PROJECT_ID-secrets-sb/endpointDeployServiceKey.json .
      - run: gcloud auth activate-service-account --key-file=endpointDeployServiceKey.json
      - run: gcloud endpoints services deploy swagger.yml
  deploy_to_production:
    machine: true
    steps:
      - checkout
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker build --cache-from=infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH -t infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH .
      - run: docker push infrastructureplayground/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BRANCH


workflows:
  version: 2
  pipeline:
    jobs:
      - unit_test:
          filters:
            branches:
              ignore:
                - master
                - production
      - login_test:
          filters:
            branches:
              only:
                - master
                - production
      - inventory_test:
          filters:
            branches:
              only:
                - master
                - production
      - push_docker_image:
          requires:
            - login_test
            - inventory_test
      - deploy_to_staging_static:
          requires:
            - push_docker_image
          filters:
            branches:
              only:
                - master
      - deploy_to_staging_code:
          requires:
            - push_docker_image
          filters:
            branches:
              only:
              - master
      - deploy_to_staging_api:
          requires:
            - push_docker_image
          filters:
            branches:
              only:
              - master
      - production_hold:
          type: approval
          filters:
            branches:
              only:
                - production
      - deploy_to_production:
          requires:
            - production_hold

# Helpful Resource:
# - https://circleci.com/docs/2.0/building-docker-images/
# - https://circleci.com/docs/2.0/parallelism-faster-jobs/
# - https://circleci.com/docs/2.0/configuration-reference/
# - https://circleci.com/docs/2.0/workflows/
# - https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables
# - https://github.com/magento-engcom/community-portal/wiki/Circle-CI-Setup-and-Workflow
# - https://discuss.circleci.com/t/workflows-pull-request-filter/14396/10